c MaxHS 4.0.0
c Instance: ../rndMatriceData/rnd100_1.csv
c Parameter Settings
c ============================================
c  A: General MaxHS Options
c   abstract-cores2greedy = false, fbeq = false, printOptions = true, printBstSoln = false,
c   printSoln = false, printSoln-new-format = true, version = false, tolerance = 1e-06,
c   coretype = 0, cpu-lim = 2147483647, mem-lim = 2147483647, sverb = 0,
c   verb = 0,
c 
c  B: MaxHS with abstractions Options
c   abstract = true, 1st-abstract-gap = 5, abstract-gap = 1, exhaust-cpu-lim = 3,
c   abs-cpu = 256, abstract-max-ave-size = 100, abstract-max_core_size = 1000, abstract-min-cores = 2,
c   cplex-greedy = 0, abstract-greedy_cores = 2, abstract-cplex_cores = 2, abstract-minsize = 2,
c  
c  C: Disjoint Phase Options
c   dsjnt = true, dsjnt-cpu-lim = 30, dsjnt-mus-cpu-lim = 10,
c 
c  D: Seeding Options
c   seed-learnts = true, all-seeded_2nd_abs_cpu = 240, all-seeded-1st-abs-cpu = 60, all-seeded-1st-cplex-cpu = 100,
c   seed_cpu_before_cplex = 200, seed-all-limit = 512, seed-max = 524288, seedtype = 3,
c  
c  E: Sequence of Sat Options
c   lp-harden = true, find-forced = false, improve-model = false, use-ub-mipstart = true,
c   optcores-cpu-lim = 10, max-cpu-improve-model = 10, max-cpu-before-cplex = 200, relaxfrac = 0.3,
c   max-size-improve-model = -1, sort-assumps = 0, max-cores-before-cplex = 300, frac-rampup-end = 512,
c   frac-rampup-start = 128, abstract-assumps = 1, nonopt = 3,
c 
c  F: Core Minimization Options
c   mus-min-red = 0.1, mus-cpu-lim = 2.5, mintype = 1, mverb = 0,
c  
c  G: CPLEX Options
c   cplex-tune = false, cplex-min-ticks = 4, cplex-threads = 1,
c 
c  H: CPLEX Solution Pool and Populate Options
c   cplextime-pop-cpu-lim = 7.5, cplex-pop-nsoln = 256, cplex-solnpool-cap = 256, cplex-populate = 1,
c   ub-conflicts = 1,
c 
c  I: Preprocessing Options
c   mx-constrain-hs = true, mx-seed-mxes = true, simplify-only = false, wcnf-harden = true,
c   preprocess = true, wcnf-eqs = true, wcnf-units = true, mx-cpu-lim = 15,
c   mx-find-mxes = 2, mx-mem-lim = 1536,
c 
c  J: Debugging Options
c   cplex-wrt-model = false, cplex-output = false, cplex-data-chk = true,
c 
c  U: full MIP solution as asumptions to SAT-solver Options
c   full_assm = 1,
c 
c  V: k-undercover BMF Options
c   k-undercover = 5,
c 
c  VV: min width confidence band Options
c   mwcb = 0,
c 
c  VVV: treewidth configuration Options
c   tw = 0,
c 
c  W: BMF symmetry breaking Options
c   sym-break = 1,
c 
c  WW: MWCB parameter k restricting amount of outlying vectors Options
c   mwcb_k = 0,
c 
c  WW: MWCB parameter s specifying the maximum amount of outlying point for a vector to be counted as outlying Options
c   mwcb_s = 0,
c 
c  WW: MWCB parameter t restricting the amount of collumnwise outlying points Options
c   mwcb_t = 0,
c 
c  X: BMF cardinality generation 1= in SAT, 2= in cplex Options
c   card-gen = 3,
c 
c  Y: implication constraint both directions Options
c   bmf_eq = 1,
c 
c  Z: degree of information in SAT, default 0 Options
c   inform_sat = 1,
c 
c  ZZ: split the solution from cplex into two groups based on objective function. Extract cores twice with different assumtions respectivelly, default 0 Options
c   split_sol = 2
c ============================================
c
amount of card constraints: 1074
Remaining compatible ones 220
c Instance: ../rndMatriceData/rnd100_1.csv
c Dimacs Vars: 55241
c Dimacs Clauses: 57732
c Dimacs Top: 960
c HARD: #Clauses = 57737, Total Lits = 124253, Ave Len = 2.1521 #units = 5
c SOFT: #Clauses = 0, Total Lits = 0, Ave Len = 0.0000
c Total Soft Clause Weight (+ basecost): 0 (+ 0)
c SOFT%: 0.0000%
c #distinct weights: 0, mean = 0.0000, std. dev = 0.0000, min = 0, max = 0
c Total Clauses: 57737
c Parse time: 0.018897
c Wcnf Space Required: 0.0000MB
c ================================
c Using IBM CPLEX version 22.1.1.0 under IBM's Academic Initiative licencing program
c EqSeed: #seeded constraints 960
c EqSeed: cores            0 Ave length 0.0000
c EqSeed: non-cores        0 Ave length 0.0000
c EqSeed: mixed cores      960 Ave length 6.0000
c EqSeed: ordinary clauses 0 Ave length 0.0000
c Cplex solve passed UB = 357.000000 current LB = 0.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex found better incumbent than UB (11.000000 < 357.000000)
c Cplex found better incumbent than UB (11.000000 < 357.000000)
c found incumbent of cost better than UB (= 357)
c Cplex solve passed UB = 357.000000 current LB = 9.000000
Cplex found standard solution OPTIMAL
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex found better incumbent than UB (15.000000 < 357.000000)
c Cplex found better incumbent than UB (15.000000 < 357.000000)
c found incumbent of cost better than UB (= 357)
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex found better incumbent than UB (15.000000 < 357.000000)
c Cplex found better incumbent than UB (15.000000 < 357.000000)
c found incumbent of cost better than UB (= 357)
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex found better incumbent than UB (19.000000 < 357.000000)
c found incumbent of cost better than UB (= 357)
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex found better incumbent than UB (17.000000 < 357.000000)
c Cplex found better incumbent than UB (17.000000 < 357.000000)
c found incumbent of cost better than UB (= 357)
c Cplex solve passed UB = 357.000000 current LB = 9.000000
c Cplex found better incumbent than UB (22.000000 < 357.000000)
c found incumbent of cost better than UB (= 357)
c Cplex solve p